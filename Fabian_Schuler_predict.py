from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Model
from tensorflow.keras.models import load_model
#from Custom_Generator import Custom_Generator_predict
import numpy as np
import pandas as pd
import pickle
import os

import glob

def main():
    batch_size=200
    file_amount=10873

    print("loading start")
    X=np.load("new_test_2021_01_11/testData/X/fileX_1_200.npy",allow_pickle=True)
    y=np.load("new_test_2021_01_11/testData/Names/fileNames_1_200.npy",allow_pickle=True)

    for i in range(1,55):
        X_i=np.load("new_test_2021_01_11/testData/X/fileX_"+str((i)*batch_size+1)+"_"+str(min((i+1)*batch_size,file_amount))+".npy",allow_pickle=True)
        y_i=np.load("new_test_2021_01_11/testData/Names/fileNames_"+str((i)*batch_size+1)+"_"+str(min((i+1)*batch_size,file_amount))+".npy",allow_pickle=True)
        X=np.concatenate((X,X_i),axis=0)
        y=np.concatenate((y,y_i),axis=0)
        print("loaded array ",i)
    
    print("len of files = "+str(X.shape[0]))
    if X.shape[0]!=file_amount:
        return
    
    np.save("new_test_2021_01_11/testData/X/fileX_complete.npy",X)
    np.save("new_test_2021_01_11/testData/Names/fileNames_complete.npy",y)
    print("complete saved")

    model_name="my_model_balanced_over90percentV11"
    model=load_model(model_name)
    print("model loaded")
    predictions=model.predict(X,batch_size=4)
    print("prediction finished")
    DF = pd.DataFrame(data = predictions, index=[i + "" for i in y], columns=['Prediction1', 'Prediction2', 'Prediction3', 'Prediction4', 'Prediction5', 'Prediction6', 'Prediction7', 'Prediction8', 'Prediction9'])

    DF.to_csv("new_test_2021_01_11/testData/predictions_"+model_name+".csv")

    print("prediction saved")
    return







    
    
    
    
    
    
    
    
    
    
    
    #old and unused stuff
    savedmoddel = f'model2.h5'
    model = load_model(savedmoddel, custom_objects=None, compile=True)
    print(model.summary())

    batch_x = os.listdir(f'K:\\model\\test_tokenized')
    predict_Generator = Custom_Generator_predict(batch_x, 32)                                    

    predictions = model.predict(x = predict_Generator, verbose = 1)

    #predictions_formated = [ ["{​​:0.10f}​​".format(y) for y in x ] for x in predictions ]

    DF = pd.DataFrame(data = predictions, index=[i[:-6] + "" for i in batch_x], columns=['Prediction1', 'Prediction2', 'Prediction3', 'Prediction4', 'Prediction5', 'Prediction6', 'Prediction7', 'Prediction8', 'Prediction9'])

    #pd.set_option('display.float_format', lambda x: '%.16f' % x)
    DF.to_csv(f'K:\\model\\predictions2.csv')

if __name__=="__main__":
    main()